---
title: "ENV S 193DS - Final"
author: "Izzy Chang"
date: "2025-05-23"
format: html
toc: true
toc-floating: true
---

## GitHub Repository:

(https://github.com/izzy-chang/ENVS-193DS_spring-2025_final)

## Set Up

```{r setup, include=FALSE}
library(tidyverse)
library(lubridate)
library(DHARMa)
library(MuMIn)
library(ggplot2)
library(janitor)
library(knitr)
library(dplyr)
library(ggeffects)
library(gtsummary)

sst <- read_csv("../data/SST_update2023.csv")
nest_boxes <- read_csv("../data/SwiftParrot_nestbox_data/occdist.csv")
```

# Problem 1. Research writing

## a. Transparent statistical methods

In part 1, they most likely used a Pearson's correlation because they are seeing how two variables relate to each other. In part 2, they likely used a one-way ANOVA because they are comparing multiple categorical groups' effects on one variable.

## b. More information needed

1.  Post-hoc comparison: The test in part 2 shows there is a difference in average nitrogen load in multiple groups (urban land, atmospheric deposition, fertilizer, wastewater treatment, and grasslands), but it does not specify which specific sources have higher or lower nitrogen loads. Using a post-hoc test, like Tukey's HSD, would clarify which sources contribute significantly more or less nitrogen to the San Joaquin River Delta.

2.  Effect size and confidence intervals: My co-worker only mentioned p-values in their statements, but more is needed to provide context about the relationships. Reporting an effect size (correlation coefficient r in part 1, eta-squared or Cohen's d in part 2) and confidence intervals around the means or correlations would provide this valuable context.

## c. Suggestions for rewriting

Part 1: We found significant negative correlation between distance from the headwater (km) and annual total nitrogen load (kg/year) in the San Joaquin River Delta (n = \[sample size\]), indicating that nitrogen loads tend to decrease farther from the headwater (Pearson's correlation test: r = \[correlation coefficient\], p = 0.03, \$alpha= \[significance level\]).

Part 2: Average nitrogen load (kg/year) differed significantly among sources (n = \[sample size for each source\]), suggesting that these sources vary in their contributions to nitrogen runoff (one-way ANOVA: F = \[test statistic\], df = \[degrees of freedom\], p = 0.02, \$alpha.

# Problem 2. Data visualization

## a. Cleaning and summarizing

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

sst_clean <- sst |> # start with original data 
  mutate(
    date = ymd(date), # convert 'date' column to Date format using year-month-day format
    year = year(date), # Extract the year as a numeric value from the 'date' column 
    month = month(date, label = TRUE, abbr = TRUE) # extract the month as a labeled factor
  ) |> 
  filter(year >= 2018, year <= 2023) |> # keep only rows where the year is between 2018 and 2023
  group_by(year, month) |> # Group the data by year and month
  summarize(
    mean_monthly_sst = round(mean(temp, na.rm = TRUE), 1),# Calculate the mean sea surface temperature (SST) per month/year
    .groups = "drop" # Ungroup after summarizing to avoid grouped data downstream
  )

# Randomly select 5 rows from the summarized dataset 'sst_clean' to view a sample
slice_sample(sst_clean, n = 5)
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

str(sst_clean) # show structure
```

## b. Visualize the data

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

color_palette <- setNames(
  colorRampPalette(c("lightgreen", "darkgreen"))(6),# Generate 6 gradient colors between light green and dark green
  as.character(2018:2023) # Name each color according to the corresponding year
)


ggplot(sst_clean, aes( # set up plot
  x = month, # have month on x-axis
  y = mean_monthly_sst, # have mean monthly sea surface temperature on y-axis
  group = factor(year), # each year will get a separate line and color
  color = factor(year)
)) + 
  geom_line(size = .5) + # add thin lines for each year's data
  geom_point(size = 2) + # add visible points on top of the lines
  scale_color_manual(
    values = color_palette, # use the green gradient
    name = "Year" # title for the legend
  ) + 
  labs( # write axis labels and legend title
    x = "Month",
    y = "Mean Monthly Sea Surface Temperature (Â°C)",
    color = "Year"
  ) + 
  theme_minimal() + # use minimal theme
  theme(
    legend.position = c(0.1, 0.70), # move the legend inside the plot area
    legend.background = element_rect(fill = "white", color = NA), # white background for legend
    panel.border = element_rect(color = "black", fill = NA, size = .5), # black border around plot
    panel.background = element_rect(fill = "white", color = NA), # white background for panel
    panel.grid.major = element_blank(), # remove major gridlines
    panel.grid.minor = element_blank(), # remove minor gridlines
    axis.ticks = element_line(color = "black", size = 0.5) # add axis ticks
)

```

# Problem 3. Data analysis

```{r}
#| echo: false
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

nest_boxes_clean <- nest_boxes |> 
  select(box, season, `edge distance`, sp) |> # select relevant columns
  rename(edge_distance = `edge distance`) |> # rename for easier coding
mutate(season = as_factor(as.character(season)), # ensure season is a categorical variable
       season = fct_relevel(season, "2016", "2019")) # set the order of factor levels

str(nest_boxes_clean) # display cleaned data set
slice_sample(
  nest_boxes_clean,
  n = 10
) # random 10 rows for sample
```

## a. Response variable

The 1s and 0s represent whether a bird occupied a given nest in a season. A 1 means the nest box was occupied and a 0 means it was not occupied. Each column the 1 or 0 appears in represents either a Swift Parrot, Common Starling, or Tree Martin. There is also a column "e" where 1 means empty and 0 means occupied.

## b. Purpose of study

The main difference is that Swift Parrots are the target critically endangered species the study aims to protect, whereas Common Starlings and Tree Martins are non-target competitors that may occupy the nest boxes and affect conservation efforts.

## c. Difference in "seasons"

The two seasons compared in the study are 2016, when nest boxes were newly deployed, and 2019, after the boxes had been established for three years. These seasons differ in terms of how species responded to the boxes over time. Competitors were more likely to occupy the boxes in 2019, suggesting that long-term box availability may unintentionally favor non-target species.

## d. Table of models

4 models total:

| Model number | Season | Distance to Forest Edge | Model description |
|:--:|:--:|:--:|----|
| 0 |  |  | no predictors (null model) |
| 1 | X | X | all predictors (saturated model) |
| 2 | X |  | season only |
| 3 |  | X | distance to forest edge only |

## e. Run the models

```{r model fitting}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

# model 0: null model
model0 <- glm(sp ~ 1,
              family = "binomial",
              data = nest_boxes_clean)

# model 1: all predictors
model1 <- glm(sp ~ season + edge_distance,
              family = "binomial",
              data = nest_boxes_clean)

# model 2: season only
model2 <- glm(sp ~ season,
              family = "binomial",
              data = nest_boxes_clean)

# model 3: edge distance only
model3 <- glm(sp ~ edge_distance,
              family = "binomial",
              data = nest_boxes_clean)
```

## f. Check the diagnostics

```{r}
# Model 0 diagnostics
plot(
  simulateResiduals(model0)
)
```

```{r}
# Model 1 diagnostics
plot(
  simulateResiduals(model1)
)
```

```{r}
# Model 2 diagnostics
plot(
  simulateResiduals(model2)
)
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

# Model 3 diagnostics
plot(
  simulateResiduals(model3)
)
```

## g. Select the best model

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

# use AICc to select the best model
AICc(model0,
     model1,
     model2,
     model3) |> 
  arrange(AICc) # arrange from best to worst
```

```{r model summary}
#| echo: true
#| message: false
#| warning: false
#| results: 'hide'

show_col_types = FALSE # hide the columns and codes and messages

summary(model1)

gtsummary::tbl_regression(model1,
                          exponentiate = TRUE) # exponentiate the estimates
```

The best model as determined by Akaike's Information Criterion (AIC) was Model 1, or the saturated model with both season and edge distance as predictors.

## h. Visualize the model predictions

```{r}
model1_preds <- ggpredict(model1,
                       terms = c("edge_distance [7:1072 by=10]", "season")) # make predictions of occupancy probability at every 10 meters from 7 to 1072 

ggplot(nest_boxes_clean, # begin with clean data
       aes(x = edge_distance, # set edge distance on x-axis
           y = sp)) + # set occupancy on y-axis
  geom_point(size = 3,
             alpha = 0.2) + # add semi-transparent data points
    geom_line(data = model1_preds,
            aes(x = x,
                 y = predicted,
                color = group),
            size = 1) + # add prediction lines, colored by season
  geom_ribbon(data = model1_preds,
              aes(x = x,
                  y = predicted,
                  ymin = conf.low,
                  ymax = conf.high,
                  fill = group),
              alpha = 0.4) + # add shaded ribbons representing 95% confidence intervals
  scale_y_continuous(limits = c(0, 1),
                     breaks = c(0, 1)) + # set y-axis to valid probability range and show only 0 and 1 labels
  scale_color_manual(values = c("2016" = "orchid", "2019" = "dodgerblue")) + 
  scale_fill_manual(values = c("2016" = "orchid", "2019" = "dodgerblue")) + # set colors for lines and ribbons
  labs(x = "Distance from Forest Edge (m)",
       y = "Probability of Swift Parrot Nest Box Occupancy",
       color = "Season",
       fill = "Season") + # add axis labels and titles
    theme(panel.background = element_rect(fill = "white", color = NA), # white background for panel
    panel.grid.major = element_blank(), # remove major gridlines
    panel.grid.minor = element_blank()) # remove minor gridlines
```

## i. Write a caption for your figure

**Figure 1:** *Model predictions of Swift Parrot nest box occupancy by distance from forest edge across two seasons.* This figure shows model predictions with 95% confidence intervals (shaded ribbons) overlaid with observed data points (dots) for the years 2016 (pink) and 2019 (blue). The x-axis represents the distance from the forest edge in meters, and the y-axis shows the probability of nest box occupancy by Swift Parrots. Predictions were generated from a generalized linear model including season and distance from forest edge as predictors. Data is from *Stojanovic, Dejan et al. (2021). Do nest boxes breed the target species or its competitors? A case study of a critically endangered bird \[Dataset\]. Dryad. https://doi.org/10.5061/dryad.83bk3j9sb*

## j. Calculate model predictions

```{r}
ggpredict(model1,
          terms = c("edge_distance [0, 900]", "season"))
```

## k. Interpret your results

The predicted probability of Swift Parrot nest box occupancy is higher at the forest edge (0m) compared to farther away (900m) in both 2016 and 2019, with occupancy dropping substantially as distance increases. Specifically, occupancy near the forest was estimated at 48% in 2016 and 30% in 2019, while farther from the edge it dropped to 12% and 6%, respectively. This suggests a clear negative relationship between distance from the forest edge and nest box occupancy, consistent across seasons. Biologically, this pattern likely reflects the Swift Parrot's dependence on forest-edge habitats for nesting, where resources such as food, shelter, and suitable nesting sites are more abundant or accessible. The difference between seasons could be influenced by Common Starlings or Tree Martins taking over the nest boxes.

# Problem 4. Affective and exploratory visualizations

## a. Comparing visualizations

The two data visualizations I originally made for Homework 2 are very straightforward and compare two variables each, one being a scatter plot comparing thesis time and screen time and the other being a bar chart comparing type of caffeine consumed and thesis time. My affective visualization includes all of the variables from the data I took, including thesis time, screen time, type of caffeine, sleep time, physical activity, and number of classes. There are not representing in a classic bar chart or scatter plot either, some of the variables are represented as just symbols rather than the actual data.

I do not see too many similarities between my visualizations. The bar chart comparing caffeine types and my affective visualization both use different colors to differentiate between the drinks. The scatter plot and my affective visualization compare screen time and thesis time.

The two visualizations from Homework 2 did not have all of my data inputted, so the patterns do seem to be different from my affective visualization. The bar chart showed that I spent the most time on my thesis when I drink coffee, but the affective visualization does not show this relationship. Although, the original scatter plot seems to have a positive correlation between screen time and thesis time and my affective visualization also seems to show that general relationship.

The feedback I got was to incorporate more variables because I originally was just comparing screen time and thesis time, like in my scatter plot from Homework 2. I took this advice and used little symbols to represent my sleep time, physical activity, and number of classes to add more detail to the visualization. This also made the visualization look more like an image rather than just a bar chart.

## b. Sharing your affective visualization

![](../data/visualization.jpeg)
